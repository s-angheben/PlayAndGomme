#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config('../.env');
var app = require('../app');
var debug = require('debug')('playandgomme:server');
var http = require('http');
const mongoose = require('mongoose');

const port = process.env.PORT || 8080;

app.locals.db = mongoose.connect(process.env.DB_URL)
    .then ( () => {

        app.listen(port, () => {
            console.log(`Server listening on port: ${port}`);
        });

    }).catch ( () => {

        console.log("Error connnecting to the database");
        throw new Error('db connection error');

    });

var server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
